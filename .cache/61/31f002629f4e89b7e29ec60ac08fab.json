{"id":"node_modules/@sentry/core/build/esm/tracing/utils.js","dependencies":[{"name":"F:\\urban\\Все работы\\module 9\\node_modules\\@sentry\\core\\build\\esm\\tracing\\utils.js.map","includedInParent":true,"mtime":1723907473554},{"name":"F:\\urban\\Все работы\\module 9\\package.json","includedInParent":true,"mtime":1723907516383},{"name":"F:\\urban\\Все работы\\module 9\\node_modules\\@sentry\\core\\build\\esm\\package.json","includedInParent":true,"mtime":1723907471223},{"name":"@sentry/utils","loc":{"line":2,"column":41,"index":99},"parent":"F:\\urban\\Все работы\\module 9\\node_modules\\@sentry\\core\\build\\esm\\tracing\\utils.js","resolved":"F:\\urban\\Все работы\\module 9\\node_modules\\@sentry\\utils\\build\\esm\\index.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getCapturedScopesOnSpan = getCapturedScopesOnSpan;\nexports.setCapturedScopesOnSpan = setCapturedScopesOnSpan;\nObject.defineProperty(exports, \"stripUrlQueryAndFragment\", {\n  enumerable: true,\n  get: function () {\n    return _utils.stripUrlQueryAndFragment;\n  }\n});\nvar _utils = require(\"@sentry/utils\");\nconst SCOPE_ON_START_SPAN_FIELD = '_sentryScope';\nconst ISOLATION_SCOPE_ON_START_SPAN_FIELD = '_sentryIsolationScope';\n\n/** Store the scope & isolation scope for a span, which can the be used when it is finished. */\nfunction setCapturedScopesOnSpan(span, scope, isolationScope) {\n  if (span) {\n    (0, _utils.addNonEnumerableProperty)(span, ISOLATION_SCOPE_ON_START_SPAN_FIELD, isolationScope);\n    (0, _utils.addNonEnumerableProperty)(span, SCOPE_ON_START_SPAN_FIELD, scope);\n  }\n}\n\n/**\n * Grabs the scope and isolation scope off a span that were active when the span was started.\n */\nfunction getCapturedScopesOnSpan(span) {\n  return {\n    scope: span[SCOPE_ON_START_SPAN_FIELD],\n    isolationScope: span[ISOLATION_SCOPE_ON_START_SPAN_FIELD]\n  };\n}"},"sourceMaps":{"js":{"mappings":[{"source":"../../../src/tracing/utils.ts","name":null,"original":{"line":8,"column":0},"generated":{"line":15,"column":0}},{"source":"../../../src/tracing/utils.ts","name":null,"original":{"line":8,"column":6},"generated":{"line":15,"column":6}},{"source":"../../../src/tracing/utils.ts","name":null,"original":{"line":8,"column":6},"generated":{"line":15,"column":31}},{"source":"../../../src/tracing/utils.ts","name":null,"original":{"line":8,"column":34},"generated":{"line":15,"column":34}},{"source":"../../../src/tracing/utils.ts","name":null,"original":{"line":8,"column":48},"generated":{"line":15,"column":48}},{"source":"../../../src/tracing/utils.ts","name":null,"original":{"line":9,"column":0},"generated":{"line":16,"column":0}},{"source":"../../../src/tracing/utils.ts","name":null,"original":{"line":9,"column":6},"generated":{"line":16,"column":6}},{"source":"../../../src/tracing/utils.ts","name":null,"original":{"line":9,"column":6},"generated":{"line":16,"column":41}},{"source":"../../../src/tracing/utils.ts","name":null,"original":{"line":9,"column":44},"generated":{"line":16,"column":44}},{"source":"../../../src/tracing/utils.ts","name":null,"original":{"line":9,"column":67},"generated":{"line":16,"column":67}},{"source":"../../../src/tracing/utils.ts","name":null,"original":{"line":16,"column":0},"generated":{"line":18,"column":0}},{"source":"../../../src/tracing/utils.ts","name":null,"original":{"line":17,"column":7},"generated":{"line":19,"column":0}},{"source":"../../../src/tracing/utils.ts","name":null,"original":{"line":17,"column":16},"generated":{"line":19,"column":9}},{"source":"../../../src/tracing/utils.ts","name":null,"original":{"line":17,"column":39},"generated":{"line":19,"column":32}},{"source":"../../../src/tracing/utils.ts","name":null,"original":{"line":17,"column":40},"generated":{"line":19,"column":33}},{"source":"../../../src/tracing/utils.ts","name":null,"original":{"line":17,"column":44},"generated":{"line":19,"column":37}},{"source":"../../../src/tracing/utils.ts","name":null,"original":{"line":17,"column":64},"generated":{"line":19,"column":39}},{"source":"../../../src/tracing/utils.ts","name":null,"original":{"line":17,"column":69},"generated":{"line":19,"column":44}},{"source":"../../../src/tracing/utils.ts","name":null,"original":{"line":17,"column":78},"generated":{"line":19,"column":46}},{"source":"../../../src/tracing/utils.ts","name":null,"original":{"line":17,"column":92},"generated":{"line":19,"column":60}},{"source":"../../../src/tracing/utils.ts","name":null,"original":{"line":17,"column":107},"generated":{"line":19,"column":62}},{"source":"../../../src/tracing/utils.ts","name":null,"original":{"line":18,"column":2},"generated":{"line":20,"column":2}},{"source":"../../../src/tracing/utils.ts","name":null,"original":{"line":18,"column":6},"generated":{"line":20,"column":6}},{"source":"../../../src/tracing/utils.ts","name":null,"original":{"line":18,"column":10},"generated":{"line":20,"column":10}},{"source":"../../../src/tracing/utils.ts","name":null,"original":{"line":18,"column":12},"generated":{"line":20,"column":12}},{"source":"../../../src/tracing/utils.ts","name":null,"original":{"line":19,"column":4},"generated":{"line":21,"column":4}},{"source":"../../../src/tracing/utils.ts","name":null,"original":{"line":19,"column":4},"generated":{"line":21,"column":8}},{"source":"../../../src/tracing/utils.ts","name":null,"original":{"line":19,"column":28},"generated":{"line":21,"column":39}},{"source":"../../../src/tracing/utils.ts","name":null,"original":{"line":19,"column":29},"generated":{"line":21,"column":41}},{"source":"../../../src/tracing/utils.ts","name":null,"original":{"line":19,"column":33},"generated":{"line":21,"column":45}},{"source":"../../../src/tracing/utils.ts","name":null,"original":{"line":19,"column":35},"generated":{"line":21,"column":47}},{"source":"../../../src/tracing/utils.ts","name":null,"original":{"line":19,"column":70},"generated":{"line":21,"column":82}},{"source":"../../../src/tracing/utils.ts","name":null,"original":{"line":19,"column":72},"generated":{"line":21,"column":84}},{"source":"../../../src/tracing/utils.ts","name":null,"original":{"line":19,"column":86},"generated":{"line":21,"column":98}},{"source":"../../../src/tracing/utils.ts","name":null,"original":{"line":19,"column":87},"generated":{"line":21,"column":99}},{"source":"../../../src/tracing/utils.ts","name":null,"original":{"line":20,"column":4},"generated":{"line":22,"column":4}},{"source":"../../../src/tracing/utils.ts","name":null,"original":{"line":20,"column":4},"generated":{"line":22,"column":8}},{"source":"../../../src/tracing/utils.ts","name":null,"original":{"line":20,"column":28},"generated":{"line":22,"column":39}},{"source":"../../../src/tracing/utils.ts","name":null,"original":{"line":20,"column":29},"generated":{"line":22,"column":41}},{"source":"../../../src/tracing/utils.ts","name":null,"original":{"line":20,"column":33},"generated":{"line":22,"column":45}},{"source":"../../../src/tracing/utils.ts","name":null,"original":{"line":20,"column":35},"generated":{"line":22,"column":47}},{"source":"../../../src/tracing/utils.ts","name":null,"original":{"line":20,"column":60},"generated":{"line":22,"column":72}},{"source":"../../../src/tracing/utils.ts","name":null,"original":{"line":20,"column":62},"generated":{"line":22,"column":74}},{"source":"../../../src/tracing/utils.ts","name":null,"original":{"line":20,"column":67},"generated":{"line":22,"column":79}},{"source":"../../../src/tracing/utils.ts","name":null,"original":{"line":20,"column":68},"generated":{"line":22,"column":80}},{"source":"../../../src/tracing/utils.ts","name":null,"original":{"line":21,"column":0},"generated":{"line":23,"column":2}},{"source":"../../../src/tracing/utils.ts","name":null,"original":{"line":22,"column":0},"generated":{"line":24,"column":0}},{"source":"../../../src/tracing/utils.ts","name":null,"original":{"line":24,"column":0},"generated":{"line":26,"column":0}},{"source":"../../../src/tracing/utils.ts","name":null,"original":{"line":25,"column":0},"generated":{"line":27,"column":0}},{"source":"../../../src/tracing/utils.ts","name":null,"original":{"line":26,"column":0},"generated":{"line":28,"column":0}},{"source":"../../../src/tracing/utils.ts","name":null,"original":{"line":27,"column":7},"generated":{"line":29,"column":0}},{"source":"../../../src/tracing/utils.ts","name":null,"original":{"line":27,"column":16},"generated":{"line":29,"column":9}},{"source":"../../../src/tracing/utils.ts","name":null,"original":{"line":27,"column":39},"generated":{"line":29,"column":32}},{"source":"../../../src/tracing/utils.ts","name":null,"original":{"line":27,"column":40},"generated":{"line":29,"column":33}},{"source":"../../../src/tracing/utils.ts","name":null,"original":{"line":27,"column":44},"generated":{"line":29,"column":37}},{"source":"../../../src/tracing/utils.ts","name":null,"original":{"line":27,"column":95},"generated":{"line":29,"column":39}},{"source":"../../../src/tracing/utils.ts","name":null,"original":{"line":28,"column":2},"generated":{"line":30,"column":2}},{"source":"../../../src/tracing/utils.ts","name":null,"original":{"line":28,"column":9},"generated":{"line":30,"column":9}},{"source":"../../../src/tracing/utils.ts","name":null,"original":{"line":29,"column":4},"generated":{"line":31,"column":4}},{"source":"../../../src/tracing/utils.ts","name":null,"original":{"line":29,"column":9},"generated":{"line":31,"column":9}},{"source":"../../../src/tracing/utils.ts","name":null,"original":{"line":29,"column":12},"generated":{"line":31,"column":11}},{"source":"../../../src/tracing/utils.ts","name":null,"original":{"line":29,"column":12},"generated":{"line":31,"column":15}},{"source":"../../../src/tracing/utils.ts","name":null,"original":{"line":29,"column":36},"generated":{"line":31,"column":16}},{"source":"../../../src/tracing/utils.ts","name":null,"original":{"line":29,"column":61},"generated":{"line":31,"column":41}},{"source":"../../../src/tracing/utils.ts","name":null,"original":{"line":29,"column":62},"generated":{"line":31,"column":42}},{"source":"../../../src/tracing/utils.ts","name":null,"original":{"line":30,"column":4},"generated":{"line":32,"column":4}},{"source":"../../../src/tracing/utils.ts","name":null,"original":{"line":30,"column":18},"generated":{"line":32,"column":18}},{"source":"../../../src/tracing/utils.ts","name":null,"original":{"line":30,"column":21},"generated":{"line":32,"column":20}},{"source":"../../../src/tracing/utils.ts","name":null,"original":{"line":30,"column":21},"generated":{"line":32,"column":24}},{"source":"../../../src/tracing/utils.ts","name":null,"original":{"line":30,"column":45},"generated":{"line":32,"column":25}},{"source":"../../../src/tracing/utils.ts","name":null,"original":{"line":30,"column":80},"generated":{"line":32,"column":60}},{"source":"../../../src/tracing/utils.ts","name":null,"original":{"line":31,"column":0},"generated":{"line":33,"column":2}},{"source":"../../../src/tracing/utils.ts","name":null,"original":{"line":31,"column":3},"generated":{"line":33,"column":3}},{"source":"../../../src/tracing/utils.ts","name":null,"original":{"line":32,"column":0},"generated":{"line":34,"column":0}}],"sources":{"../../../src/tracing/utils.ts":"import type { Span } from '@sentry/types';\nimport type { Scope } from '@sentry/types';\nimport { addNonEnumerableProperty } from '@sentry/utils';\n\n// so it can be used in manual instrumentation without necessitating a hard dependency on @sentry/utils\nexport { stripUrlQueryAndFragment } from '@sentry/utils';\n\nconst SCOPE_ON_START_SPAN_FIELD = '_sentryScope';\nconst ISOLATION_SCOPE_ON_START_SPAN_FIELD = '_sentryIsolationScope';\n\ntype SpanWithScopes = Span & {\n  [SCOPE_ON_START_SPAN_FIELD]?: Scope;\n  [ISOLATION_SCOPE_ON_START_SPAN_FIELD]?: Scope;\n};\n\n/** Store the scope & isolation scope for a span, which can the be used when it is finished. */\nexport function setCapturedScopesOnSpan(span: Span | undefined, scope: Scope, isolationScope: Scope): void {\n  if (span) {\n    addNonEnumerableProperty(span, ISOLATION_SCOPE_ON_START_SPAN_FIELD, isolationScope);\n    addNonEnumerableProperty(span, SCOPE_ON_START_SPAN_FIELD, scope);\n  }\n}\n\n/**\n * Grabs the scope and isolation scope off a span that were active when the span was started.\n */\nexport function getCapturedScopesOnSpan(span: Span): { scope?: Scope; isolationScope?: Scope } {\n  return {\n    scope: (span as SpanWithScopes)[SCOPE_ON_START_SPAN_FIELD],\n    isolationScope: (span as SpanWithScopes)[ISOLATION_SCOPE_ON_START_SPAN_FIELD],\n  };\n}\n"},"lineCount":null}},"error":null,"hash":"fa18f3a2d9929183bec8f46e59e7f846","cacheData":{"env":{}}}