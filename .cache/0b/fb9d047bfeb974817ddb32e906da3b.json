{"id":"node_modules/@sentry-internal/tracing/node_modules/@sentry/core/esm/utils/getRootSpan.js","dependencies":[{"name":"F:\\urban\\Все работы\\module 9\\node_modules\\@sentry-internal\\tracing\\node_modules\\@sentry\\core\\esm\\utils\\getRootSpan.js.map","includedInParent":true,"mtime":1723381623987},{"name":"F:\\urban\\Все работы\\module 9\\package.json","includedInParent":true,"mtime":1723907516383},{"name":"F:\\urban\\Все работы\\module 9\\node_modules\\@sentry-internal\\tracing\\node_modules\\@sentry\\core\\package.json","includedInParent":true,"mtime":1723381623663}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getRootSpan = getRootSpan;\n/**\n * Returns the root span of a given span.\n *\n * As long as we use `Transaction`s internally, the returned root span\n * will be a `Transaction` but be aware that this might change in the future.\n *\n * If the given span has no root span or transaction, `undefined` is returned.\n */\nfunction getRootSpan(span) {\n  // TODO (v8): Remove this check and just return span\n  // eslint-disable-next-line deprecation/deprecation\n  return span.transaction;\n}"},"sourceMaps":{"js":{"mappings":[{"source":"../../../src/utils/getRootSpan.ts","name":null,"original":{"line":3,"column":0},"generated":{"line":7,"column":0}},{"source":"../../../src/utils/getRootSpan.ts","name":null,"original":{"line":4,"column":0},"generated":{"line":8,"column":0}},{"source":"../../../src/utils/getRootSpan.ts","name":null,"original":{"line":5,"column":0},"generated":{"line":9,"column":0}},{"source":"../../../src/utils/getRootSpan.ts","name":null,"original":{"line":6,"column":0},"generated":{"line":10,"column":0}},{"source":"../../../src/utils/getRootSpan.ts","name":null,"original":{"line":7,"column":0},"generated":{"line":11,"column":0}},{"source":"../../../src/utils/getRootSpan.ts","name":null,"original":{"line":8,"column":0},"generated":{"line":12,"column":0}},{"source":"../../../src/utils/getRootSpan.ts","name":null,"original":{"line":9,"column":0},"generated":{"line":13,"column":0}},{"source":"../../../src/utils/getRootSpan.ts","name":null,"original":{"line":10,"column":0},"generated":{"line":14,"column":0}},{"source":"../../../src/utils/getRootSpan.ts","name":null,"original":{"line":11,"column":7},"generated":{"line":15,"column":0}},{"source":"../../../src/utils/getRootSpan.ts","name":null,"original":{"line":11,"column":16},"generated":{"line":15,"column":9}},{"source":"../../../src/utils/getRootSpan.ts","name":null,"original":{"line":11,"column":27},"generated":{"line":15,"column":20}},{"source":"../../../src/utils/getRootSpan.ts","name":null,"original":{"line":11,"column":28},"generated":{"line":15,"column":21}},{"source":"../../../src/utils/getRootSpan.ts","name":null,"original":{"line":11,"column":32},"generated":{"line":15,"column":25}},{"source":"../../../src/utils/getRootSpan.ts","name":null,"original":{"line":11,"column":58},"generated":{"line":15,"column":27}},{"source":"../../../src/utils/getRootSpan.ts","name":null,"original":{"line":12,"column":0},"generated":{"line":16,"column":2}},{"source":"../../../src/utils/getRootSpan.ts","name":null,"original":{"line":13,"column":0},"generated":{"line":17,"column":2}},{"source":"../../../src/utils/getRootSpan.ts","name":null,"original":{"line":14,"column":2},"generated":{"line":18,"column":2}},{"source":"../../../src/utils/getRootSpan.ts","name":null,"original":{"line":14,"column":9},"generated":{"line":18,"column":9}},{"source":"../../../src/utils/getRootSpan.ts","name":null,"original":{"line":14,"column":13},"generated":{"line":18,"column":13}},{"source":"../../../src/utils/getRootSpan.ts","name":null,"original":{"line":14,"column":14},"generated":{"line":18,"column":14}},{"source":"../../../src/utils/getRootSpan.ts","name":null,"original":{"line":14,"column":25},"generated":{"line":18,"column":25}},{"source":"../../../src/utils/getRootSpan.ts","name":null,"original":{"line":15,"column":0},"generated":{"line":19,"column":0}}],"sources":{"../../../src/utils/getRootSpan.ts":"import type { Span } from '@sentry/types';\n\n/**\n * Returns the root span of a given span.\n *\n * As long as we use `Transaction`s internally, the returned root span\n * will be a `Transaction` but be aware that this might change in the future.\n *\n * If the given span has no root span or transaction, `undefined` is returned.\n */\nexport function getRootSpan(span: Span): Span | undefined {\n  // TODO (v8): Remove this check and just return span\n  // eslint-disable-next-line deprecation/deprecation\n  return span.transaction;\n}\n"},"lineCount":null}},"error":null,"hash":"fc1f4cae667fc50a4181d1e9616ccd71","cacheData":{"env":{}}}